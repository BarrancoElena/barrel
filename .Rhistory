data(dune)
ord <- rda(dune, scale = TRUE)
labels <- get_ord_axis_labels(ord)$label
expect_true(grepl("^PC1  \\(.*%\\)$", labels[1]))
expect_true(grepl("^PC2  \\(.*%\\)$", labels[2]))
})
test_that("RDA labels contain method name and percent", {
data(dune)
ord <- rda(dune, scale = TRUE)
labels <- get_ord_axis_labels(ord)$label
expect_true(grepl("^PC1  \\(.*%\\)$", labels[1]))
expect_true(grepl("^PC2  \\(.*%\\)$", labels[2]))
})
test_that("RDA labels contain method name and percent", {
data(dune)
ord <- rda(dune, scale = TRUE)
labels <- get_ord_axis_labels(ord)$label
expect_true(grepl("^PC1  \\(.*%\\)$", labels[1]))
expect_true(grepl("^PC2  \\(.*%\\)$", labels[2]))
})
ord
labels
data(dune)
ord <- rda(dune, scale = TRUE)
labels <- get_ord_axis_labels(ord)$label
labels
test_that("capscale returns dbRDA axis labels with variance", {
data(dune)
ord <- capscale(dune ~ 1, distance = "bray")
labels <- get_ord_axis_labels(ord)$label
expect_true(all(grepl("^dbRDA[12] \\(.*%\\)$", labels)))
})
data(dune)
ord <- capscale(dune ~ 1, distance = "bray")
labels <- get_ord_axis_labels(ord)$label
labels
<-
ord
expect_true(all(grepl("^CAP[12] \\(.*%\\)$", labels)))
test_that("capscale returns dbRDA axis labels with variance", {
data(dune)
ord <- capscale(dune ~ 1, distance = "bray")
labels <- get_ord_axis_labels(ord)$label
expect_true(all(grepl("^CAP[12] \\(.*%\\)$", labels)))
})
data(dune)
test_that("RDA labels contain method name and percent", {
data(dune)
ord <- rda(dune, scale = TRUE)
labels <- get_ord_axis_labels(ord)$label
expect_true(grepl("^PC  \\(.*%\\)$", labels[1]))
expect_true(grepl("^PC  \\(.*%\\)$", labels[2]))
})
data(dune)
ord <- rda(dune, scale = TRUE)
labels <- get_ord_axis_labels(ord)$label
labels
test_that("RDA labels contain method name and percent", {
data(dune); data(dune.env)
ord <- rda(dune ~ Management, data = dune.env)  # << antes usabas rda(dune)
labels <- get_ord_axis_labels(ord)$label
expect_true(grepl("^RDA1 \\([^)]*%\\)$", labels[1]))
expect_true(grepl("^RDA2 \\([^)]*%\\)$", labels[2]))
})
#Testear ###########
devtools::test()
data(dune)
data(dune.env)
# Preparar ordination y metadata
ord <- rda(dune, scale = TRUE)
ord <- barrel_prepare(ord, dune.env)
# Generar gráfico con autoplot()
p <- ggplot2::autoplot(
ord,
group = "Management",
data = dune,
method = "classic",
kind = "sd",
geom_type = "polygon",
show_arrows = FALSE,
show_centroids = TRUE,
show_ellipses = TRUE,
alpha = 0.5
)
p
devtools::test_active_file("tests/testthat/test-autoplot.barrel_visual.R")
devtools::test_active_file("tests/testthat/test-autoplot_dbrda_visual.R")
devtools::test_active_file("tests/testthat/test-autoplot_dbrda_visual.R")
devtools::test_active_file("tests/testthat/test-autoplot_dbrda_visual.R")
devtools::test_active_file("tests/testthat/test-autoplot.barrel_visual.R")
devtools::test_active_file("tests/testthat/test-autoplot.barrel_visual.R")
#Testear ###########
devtools::test()
covr::package_coverage()
covr::package_coverage()
# ---------- RDA (constrained) ----------
test_that("RDA labels contain method name and percent", {
data(dune); data(dune.env)
ord <- rda(dune ~ Management, data = dune.env)
labs <- get_ord_axis_labels(ord)$label
labs <- norm_spaces(labs)
expect_true(length(labs) >= 2)
expect_true(grepl("^RDA1 \\([^)]*%\\)$", labs[1]))
expect_true(grepl("^RDA2 \\([^)]*%\\)$", labs[2]))
})
# ---------- RDA (constrained) ----------
test_that("RDA labels contain method name and percent", {
data(dune); data(dune.env)
ord <- rda(dune ~ Management, data = dune.env)
labs <- get_ord_axis_labels(ord)$label
labs <- norm_spaces(labs)
expect_true(length(labs) >= 2)
expect_true(grepl("^RDA1 \\([^)]*%\\)$", labs[1]))
expect_true(grepl("^RDA2 \\([^)]*%\\)$", labs[2]))
})
library(testthat)
library(ggplot2)
library(vegan)
library(vegan)
# ---------- RDA (constrained) ----------
test_that("RDA labels contain method name and percent", {
data(dune); data(dune.env)
ord <- rda(dune ~ Management, data = dune.env)
labs <- get_ord_axis_labels(ord)$label
labs <- norm_spaces(labs)
expect_true(length(labs) >= 2)
expect_true(grepl("^RDA1 \\([^)]*%\\)$", labs[1]))
expect_true(grepl("^RDA2 \\([^)]*%\\)$", labs[2]))
})
is_labs <- function(x) any(grepl("(^|::)labels$", class(x)))
norm_spaces <- function(x) gsub("\\s+", " ", trimws(x))
# ---------- RDA (constrained) ----------
test_that("RDA labels contain method name and percent", {
data(dune); data(dune.env)
ord <- rda(dune ~ Management, data = dune.env)
labs <- get_ord_axis_labels(ord)$label
labs <- norm_spaces(labs)
expect_true(length(labs) >= 2)
expect_true(grepl("^RDA1 \\([^)]*%\\)$", labs[1]))
expect_true(grepl("^RDA2 \\([^)]*%\\)$", labs[2]))
})
# ---------- RDA (constrained) ----------
test_that("RDA labels contain method name and percent", {
data(dune); data(dune.env)
ord <- rda(dune ~ Management, data = dune.env)
labs <- get_ord_axis_labels(ord)$label
labs <- norm_spaces(labs)
expect_true(length(labs) >= 2)
expect_true(grepl("^RDA1 \\([^)]*%\\)$", labs[1]))
expect_true(grepl("^RDA2 \\([^)]*%\\)$", labs[2]))
})
library(usethis)
library(devtools)
library(ggplot2)
library(robustbase)
library(barrel)
test_that("get_ord_axis_labels returns a list with 'label'", {
data(dune)
ord <- rda(dune, scale = TRUE)
out <- get_ord_axis_labels(ord)
expect_type(out, "list")
expect_named(out, "label")
expect_true(is.character(out$label))
expect_length(out$label, 2)
})
library(barrel)
test_that("get_ord_axis_labels returns a list with 'label'", {
data(dune)
ord <- rda(dune, scale = TRUE)
out <- get_ord_axis_labels(ord)
expect_type(out, "list")
expect_named(out, "label")
expect_true(is.character(out$label))
expect_length(out$label, 2)
})
test_that("RDA labels contain method name and percent", {
data(dune); data(dune.env)
ord <- rda(dune ~ Management, data = dune.env)  # << antes usabas rda(dune)
labels <- get_ord_axis_labels(ord)$label
expect_true(grepl("^RDA1 \\([^)]*%\\)$", labels[1]))
expect_true(grepl("^RDA2 \\([^)]*%\\)$", labels[2]))
})
devtools::document()
devtools::load_all()
test_that("get_ord_axis_labels returns a list with 'label'", {
data(dune)
ord <- rda(dune, scale = TRUE)
out <- get_ord_axis_labels(ord)
expect_type(out, "list")
expect_named(out, "label")
expect_true(is.character(out$label))
expect_length(out$label, 2)
})
test_that("RDA labels contain method name and percent", {
data(dune); data(dune.env)
ord <- rda(dune ~ Management, data = dune.env)  # << antes usabas rda(dune)
labels <- get_ord_axis_labels(ord)$label
expect_true(grepl("^RDA1 \\([^)]*%\\)$", labels[1]))
expect_true(grepl("^RDA2 \\([^)]*%\\)$", labels[2]))
})
test_that("NMDS labels are generic and do not contain variance", {
data(dune)
ord <- metaMDS(dune, k = 2)
labels <- get_ord_axis_labels(ord)$label
expect_equal(labels, c("NMDS1", "NMDS2"))
})
test_that("capscale returns dbRDA axis labels with variance", {
data(dune)
ord <- capscale(dune ~ 1, distance = "bray")
labels <- get_ord_axis_labels(ord)$label
expect_true(all(grepl("^CAP[12] \\(.*%\\)$", labels)))
})
test_that("get_ord_axis_labels returns method-prefixed axis labels with %", {
data(dune)
data(dune.env)
ord <- cca(dune ~ Management, data = dune.env)
labels <- get_ord_axis_labels(ord)$label
method_prefix <- sub("\\d+.*", "", labels[1]) # extrae "CCA" o "CA"
expect_true(all(grepl(paste0("^", method_prefix, "\\d+ \\([0-9.]+%\\)$"), labels)))
})
test_that("get_ord_axis_labels errors on unknown object class", {
fake_ord <- list()
class(fake_ord) <- "unknown"
expect_error(get_ord_axis_labels(fake_ord), regexp = "cannot find scores")
})
test_that("get_ord_axis_labels uses fallback method 'Axis'", {
dummy <- list()
class(dummy) <- "unknown"
# Definir manualmente método 'scores.unknown' para que devuelva una matriz
local({
scores.unknown <- function(ord, display = "sites") {
matrix(1:4, ncol = 2)
}
environment(scores.unknown) <- globalenv()
assign("scores.unknown", scores.unknown, envir = globalenv())
# Ejecutar el test
result <- get_ord_axis_labels(dummy)
expect_equal(result$label, c("Axis1", "Axis2"))
# Limpiar el método temporal
rm(scores.unknown, envir = globalenv())
})
})
# ---------- RDA (constrained) ----------
test_that("RDA labels contain method name and percent", {
data(dune); data(dune.env)
ord <- rda(dune ~ Management, data = dune.env)
labs <- get_ord_axis_labels(ord)$label
labs <- norm_spaces(labs)
expect_true(length(labs) >= 2)
expect_true(grepl("^RDA1 \\([^)]*%\\)$", labs[1]))
expect_true(grepl("^RDA2 \\([^)]*%\\)$", labs[2]))
})
library(vegan)
test_that("barrel_label_axes returns a labs object for constrained rda (RDA)", {
data(dune); data(dune.env)
ord <- rda(dune ~ Management, data = dune.env)
labs_layer <- barrel_label_axes(ord)
expect_true(is_labs(labs_layer))
expect_true(all(c("x","y") %in% names(labs_layer)))
expect_true(grepl("^RDA\\d+ \\([^)]*%\\)$", norm_spaces(labs_layer$x)))
expect_true(grepl("^RDA\\d+ \\([^)]*%\\)$", norm_spaces(labs_layer$y)))
})
test_that("RDA labels contain method name and percent", {
data(dune); data(dune.env)
ord <- rda(dune ~ Management, data = dune.env)  # << antes usabas rda(dune)
labels <- get_ord_axis_labels(ord)$label
expect_true(grepl("^RDA1 \\([^)]*%\\)$", labels[1]))
expect_true(grepl("^RDA2 \\([^)]*%\\)$", labels[2]))
})
data(dune)
data(dune.env)
ord <- cca(dune ~ Management, data = dune.env)
labels <- get_ord_axis_labels(ord)$label
labels
method_prefix <- sub("\\d+.*", "", labels[1])
method_prefix
test_that("get_ord_axis_labels errors on unknown object class", {
fake_ord <- list()
class(fake_ord) <- "unknown"
expect_error(get_ord_axis_labels(fake_ord), regexp = "cannot find scores")
})
test_that("get_ord_axis_labels uses fallback method 'Axis'", {
dummy <- list()
class(dummy) <- "unknown"
local({
scores.unknown <- function(ord, display = "sites") {
matrix(1:4, ncol = 2)
}
environment(scores.unknown) <- globalenv()
assign("scores.unknown", scores.unknown, envir = globalenv())
result <- get_ord_axis_labels(dummy)
expect_equal(result$label, c("Axis1", "Axis2"))
rm(scores.unknown, envir = globalenv())
})
})
test_that("get_ord_axis_labels uses fallback method 'Axis'", {
dummy <- list()
class(dummy) <- "unknown"
local({
scores.unknown <- function(ord, display = "sites") {
matrix(1:4, ncol = 2)
}
environment(scores.unknown) <- globalenv()
assign("scores.unknown", scores.unknown, envir = globalenv())
result <- get_ord_axis_labels(dummy)
expect_equal(result$label, c("Axis1", "Axis2"))
rm(scores.unknown, envir = globalenv())
})
})
test_that("unconstrained rda returns PC axis labels with variance", {
data(dune)
ord <- rda(dune)  # PCA sin restricciones
lab <- get_ord_axis_labels(ord)$label
expect_true(grepl("^PC1 \\([^)]*%\\)$", lab[1]))
expect_true(grepl("^PC2 \\([^)]*%\\)$", lab[2]))
})
test_that("cca without constraints returns CA axis labels with variance", {
data(dune)
ord <- cca(dune)  # CA (sin término de restricción)
lab <- get_ord_axis_labels(ord)$label
expect_true(grepl("^CA1 \\([^)]*%\\)$", lab[1]))
expect_true(grepl("^CA2 \\([^)]*%\\)$", lab[2]))
})
test_that("capscale with constraints returns dbRDA axis labels with variance", {
data(dune); data(dune.env)
ord <- capscale(dune ~ Management, data = dune.env, distance = "bray")
lab <- get_ord_axis_labels(ord)$label
expect_true(grepl("^dbRDA1 \\([^)]*%\\)$", lab[1]))
expect_true(grepl("^dbRDA2 \\([^)]*%\\)$", lab[2]))
})
test_that("decorana returns DCA axis labels (no variance shown)", {
data(dune)
ord <- decorana(dune)
lab <- get_ord_axis_labels(ord)$label
expect_true(grepl("^DCA1$", lab[1]))
expect_true(grepl("^DCA2$", lab[2]))
})
#Testear ###########
devtools::test()
covr::package_coverage()
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
devtools::check(cran = TRUE)
devtools::check(cran = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
devtools::check()
devtools::check(cran = TRUE)
devtools::document()
devtools::load_all()
devtools::install()
library(barrel)
devtools::check_win_release()
devtools::check_win_devel()
library(vegan)
library(ggplot2)
data(dune); data(dune.env)
ord_rda_con <- rda(dune ~ Management, data = dune.env)
get_ord_axis_labels(ord_rda_con)$label
# Ejemplo rápido con ggplot:
sc <- as.data.frame(scores(ord_rda_con, display = "sites"))
ggplot(sc, aes(PC1, PC2)) + geom_point() + barrel_label_axes(ord_rda_con)
sc
sc
ord_rda_con
sc
ord_pca <- rda(dune)  # sin fórmula = PCA
get_ord_axis_labels(ord_pca)$label
library(barrel)
data(dune); data(dune.env)
ord_rda_con <- rda(dune ~ Management, data = dune.env)
get_ord_axis_labels(ord_rda_con)$label
# Ejemplos completos para get_ord_axis_labels()
# --------------------------------------------
# Carga
library(vegan)
# Datos de ejemplo
data(dune); data(dune.env)
# 1) RDA CON restricciones -> "RDA1 (..%)", "RDA2 (..%)"
ord_rda_con <- rda(dune ~ Management, data = dune.env)
pp("RDA (con restricciones):", get_ord_axis_labels(ord_rda_con)$label)
get_ord_axis_labels(ord_rda_con)$label)
get_ord_axis_labels(ord_rda_con))
get_ord_axis_labels(ord_rda_con)
barrel::get_ord_axis_labels(ord_rda_con)
barrel::get_ord_axis_labels(ord_rda_con)
library(barrel)
# Datos de ejemplo
data(dune); data(dune.env)
pp <- function(titulo, x) {
cat("\n", rep("-", 70), "\n", titulo, "\n", sep = "")
print(x)
}
# 1) RDA CON restricciones -> "RDA1 (..%)", "RDA2 (..%)"
ord_rda_con <- rda(dune ~ Management, data = dune.env)
barrel::get_ord_axis_labels(ord_rda_con)
#' Internal function to get axis labels for vegan ordination objects
#'
#' This function infers the ordination method used and returns proper axis labels
#' including percentage of explained variance when applicable.
#'
#' @param ord A vegan ordination object.
#' @return A list with one element `label`, a character vector for axis labels.
#' @export
get_ord_axis_labels <- function(ord) {
scores_mat <- vegan::scores(ord, display = "sites")
n_axes <- ncol(scores_mat)
make_labels <- function(tag, prop = NULL, n_axes = 2L) {
if (is.null(prop)) {
return(paste0(tag, seq_len(n_axes)))
} else {
k <- min(length(prop), n_axes)
labs <- paste0(tag, seq_len(k), " (", round(100 * prop[seq_len(k)], 1), "%)")
if (k < n_axes) {
labs <- c(labs, paste0(tag, seq((k + 1L), n_axes)))
}
return(labs)
}
}
if (inherits(ord, "metaMDS"))  return(list(label = make_labels("NMDS", n_axes = n_axes)))
if (inherits(ord, "decorana")) return(list(label = make_labels("DCA",  n_axes = n_axes)))
if (inherits(ord, "capscale")) {
eig_con <- tryCatch(vegan::eigenvals(ord, model = "constrained"),
error = function(e) numeric())
eig_con <- eig_con[is.finite(eig_con) & eig_con > 0]
if (length(eig_con) > 0) {
prop <- eig_con / sum(eig_con, na.rm = TRUE)
return(list(label = make_labels("dbRDA", prop = prop, n_axes = n_axes)))
} else {
eig_un <- tryCatch(vegan::eigenvals(ord, model = "unconstrained"),
error = function(e) numeric())
eig_un <- eig_un[is.finite(eig_un) & eig_un > 0]
prop <- if (length(eig_un) > 0) eig_un / sum(eig_un, na.rm = TRUE) else NULL
return(list(label = make_labels("CAP", prop = prop, n_axes = n_axes)))
}
}
if (inherits(ord, "rda")) {
if (!is.null(ord$CCA) && length(ord$CCA$eig) > 0) {
eig <- ord$CCA$eig
prop <- eig / sum(eig, na.rm = TRUE)
return(list(label = make_labels("RDA", prop = prop, n_axes = n_axes)))
} else {
eig <- ord$CA$eig
prop <- eig / sum(eig, na.rm = TRUE)
return(list(label = make_labels("PC", prop = prop, n_axes = n_axes)))
}
}
if (inherits(ord, "cca")) {
if (!is.null(ord$CCA) && length(ord$CCA$eig) > 0) {
eig <- ord$CCA$eig
prop <- eig / sum(eig, na.rm = TRUE)
return(list(label = make_labels("CCA", prop = prop, n_axes = n_axes)))
} else {
eig <- ord$CA$eig
prop <- eig / sum(eig, na.rm = TRUE)
return(list(label = make_labels("CA", prop = prop, n_axes = n_axes)))
}
}
return(list(label = make_labels("Axis", n_axes = n_axes)))
}
get_ord_axis_labels(ord_rda_con)
# 1) RDA CON restricciones -> "RDA1 (..%)", "RDA2 (..%)"
ord_rda_con <- rda(dune ~ Management, data = dune.env)
get_ord_axis_labels(ord_rda_con)
# 2) rda SIN restricciones (PCA) -> "PC1 (..%)", "PC2 (..%)"
ord_pca <- rda(dune)
get_ord_axis_labels(ord_rda_con)
# 2) rda SIN restricciones (PCA) -> "PC1 (..%)", "PC2 (..%)"
ord_pca <- rda(dune)
get_ord_axis_labels(ord_rda_con)
# 3) CCA CON restricciones -> "CCA1 (..%)", "CCA2 (..%)"
ord_cca_con <- cca(dune ~ Management, data = dune.env)
get_ord_axis_labels(ord_rda_con)
# 4) CCA SIN restricciones (CA) -> "CA1 (..%)", "CA2 (..%)"
ord_ca <- cca(dune)
get_ord_axis_labels(ord_pca)
get_ord_axis_labels(ord_cca_con)
get_ord_axis_labels(ord_ca)
# 5) capscale CON restricciones (dbRDA) -> "dbRDA1 (..%)", "dbRDA2 (..%)"
ord_dbrda <- capscale(dune ~ Management, data = dune.env, distance = "bray")
get_ord_axis_labels(ord_dbrda)
get_ord_axis_labels(ord_cap)
# 6) capscale SIN restricciones -> suele rotular "CAP1/2 (..%)" o "PC1/2 (..%)" según versión
ord_cap <- capscale(dune ~ 1, distance = "bray")
get_ord_axis_labels(ord_cap)
# 7) NMDS (metaMDS) -> "NMDS1", "NMDS2" (sin %)
set.seed(123)
ord_nmds <- metaMDS(dune, k = 2, trymax = 20, trace = 0)
get_ord_axis_labels(ord_nmds)
# 8) DCA (decorana) -> "DCA1", "DCA2" (sin %)
ord_dca <- decorana(dune)
get_ord_axis_labels(ord_rda_con)
get_ord_axis_labels(ord_dca)
# 9) Fallback 'Axis' (solo para pruebas):
#    Creamos temporalmente un método scores.unknown() para simular clase desconocida
dummy <- list(); class(dummy) <- "unknown"
scores.unknown <- function(ord, display = "sites") matrix(1:4, ncol = 2)
pp("Fallback 'Axis' (clase desconocida con scores() definido):", get_ord_axis_labels(dummy)$label)
rm(scores.unknown)
get_ord_axis_labels(dummy)
devtools::document()
devtools::load_all()
devtools::document()
rm(list = c("get_ord_axis_labels"))
devtools::document()
devtools::load_all()
#Testear ###########
devtools::test()
covr::package_coverage()
covr::package_coverage()
browseVignettes("barrel")
install.packages("available")
available::available("barrel")
